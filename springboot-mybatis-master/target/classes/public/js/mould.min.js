"use strict";

//  Ajax.
var _Ajax = function (e) {
    e = e || {};
    e.method = (e.method || "GET").toUpperCase();
    e.asnyc = e.asnyc || true;
    e.postType = (e.postType || 'FORM').toUpperCase();
    if (e.postType == 'FORM') {
        var data = (function (data) {
            var arr = [];
            for (var name in data) {
                if (data.hasOwnProperty(name)) {
                    arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(data[name]));
                };
            };
            return arr.join("&");
        })(e.data);
    } else if (e.postType == 'JSON') {
        var data = JSON.stringify(e.data);
    } else if (e.postType == 'FILE') {
        var data = new FormData();
        if (e.data.length > 1) {
            for (var i = 0; i < e.data.length; i++) {
                data.append('files', e.data[i]);
            }
        } else {
            data.append('files', e.data[0]);
        };
    };
    var X;
    if (window.XMLHttpRequest) {
        X = new XMLHttpRequest();
    } else {
        X = new ActiveXObject('Microsoft.XMLHTTP');
    };
    X.onreadystatechange = function () {
        if (X.readyState == 4) {
            if (X.status >= 200 && X.status < 300) {
                e.success && e.success(X.responseText, X.responseXML);
            } else {
                e.fail && e.fail();
            };
        };
    };
    if (e.method == "GET") {
        if (data != '') {
            data = '?' + data;
        };
        X.open("GET", e.url + data, e.asnyc);
        X.send(null);
    } else if (e.method == "POST") {
        X.open("POST", e.url, e.asnyc);
        //设置表单提交时的内容类型
        if (e.postType == 'FORM') {
            X.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        } else if (e.postType == 'JSON') {
            X.setRequestHeader("Content-Type", "application/json");
        };
        X.send(data);
    };
};

//  Stop Bubble.
var SB = function () {
    var E = arguments.callee.caller.arguments[0] || window.event;
    if (window.event) {
        E.cancelBubble = true;
    } else {
        E.stopPropagation();
    };
};

//  Create Element.
var _Create = function (type, content, appendToObj) {
    var e = document.createElement(type);
    for (var i in content) {
        if (content.hasOwnProperty(i)) {
            if (i.toLowerCase() == 'class') {
                e.className = content[i];
            } else if (i.toLowerCase() == 'style') {
                e.style.cssText = content[i];
            } else if (i.toLowerCase() == 'innerhtml') {
                e.innerHTML = content[i];
            } else if (i.toLowerCase() == 'innertext') {
                e.innerText = content[i];
            } else {
                e[i] = content[i];
                _M(e).attr(i, content[i]);
            };
        };
    };
    if (appendToObj == 'body') {
        appendToObj = document.body;
    };
    if (appendToObj != "" && appendToObj != null && appendToObj != undefined) {
        appendToObj.appendChild(e);
    };
    return e;
};

//  Selector.
var _m = function () {
    var A = arguments;
    if (A.length != 1) {
        console.error('Error !!! The selector affects only one, SORRY :(');
        return underfined;
    } else {
        try {
            if (document.querySelectorAll(A[0]).length > 1) {
                return document.querySelectorAll(A[0]);
            } else {
                return document.querySelector(A[0]);
            };
        } catch (err) {
            return A[0];
        };
    };
};

//  Simple method.
var _Mm = function (DOM) {
    this.dom = DOM;
};
var method = _Mm.prototype;
var _M = function (DOM) {
    return new _Mm(DOM);
};

document.getElementByAttr = function (attr, param) {          //  根据自定义属性寻找对象.
    var element = this.dom.querySelectorAll("*");
    var arr = [];
    var arr2 = [];
    for (var i = 0; i < element.length; i++) {
        if (element[i].getAttribute(attr) != null) {
            arr.push(element[i]);
        };
    };
    if (param) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].getAttribute(attr) == param) {
                arr2.push(arr[i]);
            };
        };
        return arr2;
    } else {
        return arr;
    };
};

method.attr = function () {          //  获取属性值(若有两个参数则修改属性值).
    if (arguments[1]) {
        this.dom.setAttribute(arguments[0], arguments[1]);
        return;
    } else {
        return this.dom.getAttribute(arguments[0]);
    };
};

method.removeAttr = function () {
    if (arguments.length > 1) {
        for (var i = 0; i < arguments.length; i++) {
            this.dom.removeAttribute(arguments[i]);
        }
    } else if (arguments.length == 0) {
        return;
    } else {
        this.dom.removeAttribute(arguments[0]);
    };
    return this;
};

method.empty = function () {
    if (this.dom.value) {
        this.dom.value = '';
    };
    this.dom.innerHTML = '';
    return;
};

method.addClass = function () {          //  添加Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        try {
            this.dom.classList.add(arguments[i]);
        } catch (err) {
            if (this.dom.className.split(/\s+/).length > 0) {
                this.dom.className += ' ';
            };
            this.dom.className += arguments[i];
        };
    };
    return this;
};

method.removeClass = function () {          //  删除Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        try {
            this.dom.classList.remove(arguments[i]);
        } catch (err) {
            var C = new RegExp('(\\s|^)' + arguments[i] + '(\\s|$)');
            this.dom.className = this.dom.className.replace(C, '');
        };
    };
    return this;
};

method.toggleClass = function () {          //  添加 || 删除Class(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        if (_M(this.dom).hasClass(arguments[i])) {
            _M(this.dom).removeClass(arguments[i]);
        } else {
            _M(this.dom).addClass(arguments[i]);
        };
    };
    return this;
};

method.hasClass = function (cN) {          //  查询有无参数Class.
    try {
        return this.dom.classList.contains(cN);
    } catch (err) {
        for (var x in this.dom.className.split(/\s+/)) {
            if (this.dom.className.split(/\s+/)[x] == cN) {
                return true;
            };
        };
        return false;
    };
};

method.css = function () {
    if (arguments.length == 0) {
        return window.getComputedStyle(this.dom, null);
    } else {
        if (arguments[0].toLowerCase() == ':before' || arguments[0].toLowerCase() == ':after') {
            if (arguments[1]) {
                if (arguments.length > 2) {
                    var arr = [];
                    for (var i = 1; i < arguments.length; i++) {
                        arr[arguments[i]] = window.getComputedStyle(this.dom, arguments[0].toLowerCase()).getPropertyValue(arguments[i]);
                    };
                    return arr;
                } else {
                    return window.getComputedStyle(this.dom, arguments[0].toLowerCase()).getPropertyValue(arguments[1]);
                };
            } else {
                return window.getComputedStyle(this.dom, arguments[0].toLowerCase());
            };
        } else {
            if (arguments.length > 1) {
                var arr = [];
                for (var i = 1; i < arguments.length; i++) {
                    arr[arguments[i]] = window.getComputedStyle(this.dom, null).getPropertyValue(arguments[i]);
                };
                return arr;
            } else {
                return window.getComputedStyle(this.dom, null).getPropertyValue(arguments[0]);
            };
        };
    };
};

method.removeStyle = function () {          //  删除Style(可填多个参数).
    for (var i = 0; i < arguments.length; i++) {
        this.dom.style[arguments[i]] = '';
    };
    return this;
};

method.parent = function () {
    if (arguments.length == 1) {
        var _o = this.dom.parentNode;
        var arr = [];
        while (_o != undefined && _o != null && _o.tagName.toUpperCase() != 'BODY') {
            if (_M(_o).hasClass(arguments[0].replace('.', '')) || _o.id == arguments[0].replace('#', '')) {
                arr.push(_o);
            };
            _o = _o.parentNode;
        };
        return arr;
    } else {
        return this.dom.parentNode;
    };
};

method.isParent = function (P) {
    var _o = this.dom;
    while (_o != undefined && _o != null && _o.tagName.toUpperCase() != 'BODY') {
        if (_o == P) {
            return true;
        };
        _o = _o.parentNode;
    };
    return false;
};

method.child = function () {
    if (arguments.length == 1) {
        var R = this.dom.querySelectorAll(arguments[0]);
        R.length > 1 ? R = this.dom.querySelectorAll(arguments[0]) : (R.length > 0 ? R = this.dom.querySelector(arguments[0]) : R = '');
        return R;
    } else {
        return this.dom.children;
    };
};

method.hasChild = function (S) {
    var C = this.dom.querySelector(S);
    for (var x in this.dom.children) {
        if (this.dom.children[x] == C) {
            return true;
        };
    };
    return false;
};

method.remove = function () {
    if (this.dom != null && this.dom != undefined) {
        this.dom.parentNode.removeChild(this.dom);
    } else {
        return this;
    };
};

method.clone = function () {
    var T = false;
    if (arguments[0] != '' && arguments[0] != null && arguments[0] != undefined) {
        if (arguments[0] == true) {
            T = true;
        };
    };
    return document.importNode(this.dom, T);
};

method.forEach = function (F) {
    for (var i = 0; i < this.dom.length; i++) {
        F(this.dom[i]);
    };
    return this;
};

method.fadeOut = function () {     //    淡入
    var that = this.dom;
    var A = arguments;
    var S = 200;
    if (A[0] && !isNaN(A[0])) {
        S = A[0] / 5;
    };
    var R = function () {
        return;
    };
    var T, C = 0;
    T = setInterval(function () {
        C++;
        that.filters ? that.style.filter = 'alpha(opacity=' + 100 - (100 * C) / S + ')' : that.style.opacity = 1 - (1 * C) / S;
        if (C == S) {
            clearTimeout(T);
            that.style.display = 'none';
            that.style.visibility = 'hidden';
            A[0] && typeof A[0] == 'function' ? A[0]() : (A[1] && typeof A[1] == 'function' ? A[1]() : R());
        };
    }, 1);
    return this;
};

method.fadeIn = function () {     //   浅出
    if (this.dom.style.display != 'block') {
        var that = this.dom;
        var A = arguments;
        that.style.display = 'block';
        that.style.visibility = 'visible';
        var S = 200;
        if (A[0] && !isNaN(A[0])) {
            S = A[0] / 5;
        };
        var R = function () {
            return;
        };
        var T, C = 0;
        T = setInterval(function () {
            C++;
            that.filters ? that.style.filter = 'alpha(opacity=' + 0 + (100 * C) / S + ')' : that.style.opacity = 0 + (1 * C) / S;
            if (C == S) {
                clearTimeout(T);
                A[0] && typeof A[0] == 'function' ? A[0]() : (A[1] && typeof A[1] == 'function' ? A[1]() : R());
            };
        }, 1);
    };
    return this;
};